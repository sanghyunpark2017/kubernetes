
#########################
# 목적
#########################
-이미지 빌드 전용서버에서 진행
-Centos7 이미지를 만들고 여기 위에 아파치, 톰캣 순서대로 설치함
-컨테이너의 특/장점을 활용하기 보다는 이를 VM서버처럼 사용하는 것을 테스트함
-모든 변경의 요소(config file)와 읽기요소(logs)를 export하여 컨테이너 안으로 들어갈 일이 없게끔 함


#개요
1) Centos7 도커이미지에 openssh(/w SSL)을 컴파일하고, 표준OS 설정을 추가하여 이 것을 기본OS 이미지로 사용한다.
-시스템툴 : openssh 컴파일, netstat, ping 등 추가
-계정 : wasadm 등 공통사용계정추가
-테스트 : SSHD 구동하고, ssh 접속

2) 위 기존OS이미지를 가지고 시스템로그를 elasticsearch로 빼는 filebeat 등 ADDON 작업을 한다.
ADDON 작업은 현재로서는 filebeat만 있음(데몬구동 -> SSHD+FILEBEAT)
이 것을 BASE-OS 이미지로 사용한다.

3) INIT-OS 또는 BASE-OS 위에 아파치를 소스컴파일 한다.
http only, http&https 2가지 버전으로 하며 
외보볼륨 연결은 NFS로 하고 설정파일, 로그파일, 인증서파일 등을 EXPORT 한다.
이 것을 Single Apache 표준 이미지로 사용한다.

########################################
#기본 Centos7 OS 이미지 생성(다른서버)
########################################

#검색하면 centos official이 있는데 이 것은 항상 최신의 이미지임
docker search centos

#centos만 지정하면 최신버전이고, 버전을 명시하면 그 버전으로 다운로드함
#docker pull --name "mycentos7" docker.io/centos:7 #docker-ce 버전은 "--name"옵션을 지원하지 않음

docker pull docker.io/centos:7
docker images

#컨테이너 만들 떄 TIMEZONE은 서울로 맞춘다.
docker run -dit -e TZ=Asia/Seoul --name "mycentos7beta" centos:7 

#bash쉘 프로파일 사용할 것이므로 bash로 들어간다
docker exec -it mycentos7beta /bin/bash
date


########################################
# 각종 툴 설치
########################################

#OS공통 툴(크기 94MB / 294MB)
yum install -y net-tools wget curl which

#파일백업 스크립트
cd /sbin
vi bk
------------------------------------------------------------
#CP.ALL.ENABLE
for i in $*
do
        if [ -f $i ]
        then
                cp -pf "$1" "$1".`date +"%y%m%d.%H%M%S"`
        else
                echo "`basename $0` <filenames>"
        fi
done
------------------------------------------------------------

chmod 755 bk

#bash profile
cat << EOF >> /root/.bashrc
export PS1="\[\e[36;1m\]\u@\[\e[32;1m\]\h:\[\e[31;1m\]\w# \[\e[0m\]"
alias ll='ls -al'
EOF


#OpenSSH 빌드용(크기 387MB / 587MB)
yum install -y perl-CGI
yum groupinstall -y "Development tools"


########################################
# 설치 - OpenSSL
########################################

1. 다운로드 
mkdir -p /app/src
cd /app/src
wget https://ftp.openssl.org/source/old/1.0.1/openssl-1.0.1u.tar.gz
tar zxvf openssl-1.0.1u.tar.gz
cd openssl-1.0.1u

2. 컴파일
./config -fPIC --prefix=/usr/local/ssl
make
make test
make install

3. 이전 버전 백업(없으므로 PASS
which openssl
/usr/bin/openssl version
ls -al /usr/bin/openssl
mv /usr/bin/openssl /usr/bin/openssl.0.2K-fips

4. 신규 버전을 심볼릭 링크로 설정
ln -s /usr/local/ssl/bin/openssl /usr/bin/openssl

5. 신규 버전 확인
which openssl
/usr/bin/openssl version

openssl version

exit

########################################
# Local Registry에 등록
########################################

#이 컨테이너를 이미지로 저장한다.
#https://www.techrepublic.com/article/how-to-commit-changes-to-a-docker-image/
#이미지 이름은 Local Resistry에 업로드 할 수 있는 naming(repository:tag)으로 한다
#hosts 파일에 localreg 등록

docker commit CONTAINER_ID reg.hmp.com:443/mycentos7beta:1


#이미지가 저장되었는지 확인되면 업로드 한다
docker images
docker push reg.hmp.com:443/mycentos7beta:1

#업로드확인
curl https://reg.hmp.com/v2/_catalog


#로컬이미지 삭제하고 Private Resistry에서 다시 가져와 본다

docker stop mycentos7beta
docker rm mycentos7beta
docker rmi reg.hmp.com:443/mycentos7beta:1

docker run -dit --name "mycentos7beta" reg.hmp.com:443/mycentos7beta:1

docker exec -it mycentos7beta /bin/bash
date
openssl version
exit



