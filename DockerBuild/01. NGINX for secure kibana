

#배경
-보안로그통합 ELk 및 kibana로 구현하는 중 kibana에 보안기능(로그인화면)이 없음
-보안기능을 사용하려면 gold subscription를 구매해야하며, 년간 약 1600만원 발생 (노드당 520만원, 최소 3노드 필요)
-비용 없이 구현하는 방안 마련 

#방안
-kibana 로그인을 nginx proxy로 구현
-docker로 하며 official nginx를 다운로드 받아서 로컬이미지화 함
-official nginx가 우부트 기반임

docker pull nginx

docker run -dit -p 32001:80 --name "mynginx" nginx
 

docker exec -it mynginx /bin/bash


apt-get -y update
apt-get install -y apache2-utils vim


htpasswd -c /etc/nginx/.htpasswd hmplogadm
>>logmon/4u

cat /etc/nginx/.htpasswd
 
cd /etc/nginx/conf.d
cp default.conf default.conf.org


----------------------------------------------------------------
cat << EOF > /etc/nginx/conf.d/default.conf
server {
  listen *:80;
  server_name _;
  location / {
    proxy_pass http://10.10.64.91:5601;
    auth_basic "Restricted";
    auth_basic_user_file /etc/nginx/.htpasswd;
  }
}  
EOF
-----------------------------------------------------------------

cat /etc/nginx/conf.d/default.conf

#변경된 설정이 동작하는지 중지 후 재시작

exit

docker stop mynginx
docker start mynginx
docker logs mynginx

#현재 머신에서 expose후 kibana로 proxy되는지 테스트

curl localhost:32001

http://10.10.64.90:32001


#이미지업로드

docker stop mynginx
docker commit CON-ID reg.hmp.com:443/mynginx-kibana-login-201809131551
docker push reg.hmp.com:443/mynginx-kibana-login-201809131551
curl https://reg.hmp.com/v2/_catalog

#다시 테스트(SKIP)
docker run -dit -p 32001:80 --name "mynginx-kibana-login" reg.hmp.com:443/mynginx-kibana-login-201809131551
http://10.10.64.90:32001


############################
# Kubernetes/nginx-kibana
############################

vi /root/demo-nginx-kibana-login-deployment.yaml
----------------------------------------------------------------------------------------
#cat << EOF > /root/demo-nginx-kibana-login-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: demo-nginx-kibana-login-deployment
  namespace: default
  labels:
    app: demo-nginx-kibana-login
    tier: frontend
    role: making
    deployment: v1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: demo-nginx-kibana-login
      tier: frontend
      role: making
      deployment: v1
  template:
    metadata:
      labels:
        app: demo-nginx-kibana-login
        tier: frontend
        role: making
        deployment: v1
    spec:
      containers:
      - name: demo-nginx-kibana-login-pod
        image: reg.hmp.com/mynginx-kibana-login-201809131551:latest
        ports:
        - containerPort: 80
        resources:
          limits:
            memory: "200Mi"
          requests:
            memory: "100Mi"
        command: ["nginx", "-g", "daemon off;"]
#        volumeMounts:
#        - mountPath: /app/logstash-6.4.0/config/logstash.conf
#          name: name1
#      volumes:
#      - name: name1
#        hostPath:
#          path: /vol/private/logstash-security-2008-deployment/app/logstash-6.4.0/config/logstash.conf
#          type: File
----------------------------------------------------------------------------------------


vi /root/demo-nginx-kibana-login-service.yaml
----------------------------------------------------------------------------------------
#cat << EOF > /root/demo-nginx-kibana-login-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: demo-nginx-kibana-login-service
  namespace: default
spec:
  type: NodePort
  selector:
    app: demo-nginx-kibana-login
    tier: frontend
    role: making
    deployment: v1
  ports:
  - name: http
    protocol: TCP
    port: 80
    nodePort: 32003
----------------------------------------------------------------------------------------


kubectl apply -f /root/demo-nginx-kibana-login-deployment.yaml
kubectl apply -f /root/demo-nginx-kibana-login-service.yaml




############################
# HA-Proxy 설정
############################
bk /etc/haproxy/haproxy.cfg

vi  /etc/haproxy/haproxy.cfg
-------------------------------------------------------------------------------------------------------------------------
#***********************
# nginx-kibana-login
#***********************

frontend nginx-kibana-login
  bind *:80
  mode tcp
  option tcplog
  default_backend nginx-kibana-login

backend nginx-kibana-login
  mode tcp
  option tcplog
  option tcp-check
  balance roundrobin
  default-server inter 10s downinter 5s rise 2 fall 2 slowstart 60s maxconn 250 maxqueue 256 weight 100
  server t1vkubework1 10.10.64.64:32003 check fall 3 rise 2
  server t1vkubework2 10.10.64.65:32003 check fall 3 rise 2
  server t1vkubework3 10.10.64.66:32003 check fall 3 rise 2
-------------------------------------------------------------------------------------------------------------------------

firewall-cmd --get-default-zone
firewall-cmd --permanent --zone=public --add-port=80/tcp
firewall-cmd --reload
firewall-cmd --list-ports

systemctl stop haproxy
systemctl start haproxy
systemctl status haproxy


############################
# 접속테스트
############################

http://10.10.64.99 (hmplogadm / logmon/4u)



 















#이제 이미지 tag 후 업로드 하고
kube에서는 .htpasswd 파일과 nginx.conf 파일을 외부로 뺀다.
그러면,, RUNNING 중 암호변경 후 재기동하여 암호 변경이 쉽게 될 수 있ㄷ

+kube로 뺀다.
+nginx에 ssl
+otp 인증
++초화면 디자인 가능한지
-> nginx에서 로컬 이미지와 인증, OTP인증하게 제작하고 -> JAVA로 하긴 
-> 





