
#########################
# 목적
#########################
-이미지 빌드 전용서버에서 진행
-Centos7 이미지를 만들고 여기 위에 아파치, 톰캣 순서대로 설치함
-컨테이너의 특/장점을 활용하기 보다는 이를 VM서버처럼 사용하는 것을 테스트함
-모든 변경의 요소(config file)와 읽기요소(logs)를 export하여 컨테이너 안으로 들어갈 일이 없게끔 함


#개요
1) Centos7 도커이미지에 openssh(/w SSL)을 컴파일하고, 표준OS 설정을 추가하여 이 것을 기본OS 이미지로 사용한다.
-시스템툴 : openssh 컴파일, netstat, ping 등 추가
-계정 : wasadm 등 공통사용계정추가
-테스트 : SSHD 구동하고, ssh 접속

2) 위 기존OS이미지를 가지고 시스템로그를 elasticsearch로 빼는 filebeat 등 ADDON 작업을 한다.
ADDON 작업은 현재로서는 filebeat만 있음(데몬구동 -> SSHD+FILEBEAT)
이 것을 BASE-OS 이미지로 사용한다.

3) INIT-OS 또는 BASE-OS 위에 아파치를 소스컴파일 한다.
http only, http&https 2가지 버전으로 하며 
외보볼륨 연결은 NFS로 하고 설정파일, 로그파일, 인증서파일 등을 EXPORT 한다.
이 것을 Single Apache 표준 이미지로 사용한다.

################################
#(PASS)기본OS 이미지 생성 기본 개념
################################

1. Centos 버전의 DOCKERFILE은 공식 사이트에 있음
#https://hub.docker.com/_/centos/

#CentOS 이미지 문서를 참고하여 설치함
#https://github.com/docker-library/docs/tree/master/centos

#이렇게 그냥 가져와도 되나 추가 할 것들이 많으니
#docker pull centos:6.9
#docker pull centos:7

#Dockerfile안에서 systemd 기반의 CentOS(systemd 기반이어야 spache 등 기동 가능)
-----------------------------------------------------------------------------------------------
cat << EOF > /root/Dockerfile
FROM centos:7
ENV container docker
RUN (cd /lib/systemd/system/sysinit.target.wants/; for i in *; do [ $i == \
systemd-tmpfiles-setup.service ] || rm -f $i; done); \
rm -f /lib/systemd/system/multi-user.target.wants/*;\
rm -f /etc/systemd/system/*.wants/*;\
rm -f /lib/systemd/system/local-fs.target.wants/*; \
rm -f /lib/systemd/system/sockets.target.wants/*udev*; \
rm -f /lib/systemd/system/sockets.target.wants/*initctl*; \
rm -f /lib/systemd/system/basic.target.wants/*;\
rm -f /lib/systemd/system/anaconda.target.wants/*;
VOLUME [ "/sys/fs/cgroup" ]
CMD ["/usr/sbin/init"]
EOF
-----------------------------------------------------------------------------------------------

#local에 이미지를 만들고
cd ~
docker build --rm -t local/c7-systemd .

docker images

#이렇게 로컬디스크에 만든 것에다가 각종 툴 들을 설치한다.
-----------------------------------------------------------------------------------------------
cat << EOF > /root/Dockerfile
FROM local/c7-systemd
RUN yum -y install httpd; yum clean all; systemctl enable httpd.service
EXPOSE 80
CMD ["/usr/sbin/init"]
EOF
-----------------------------------------------------------------------------------------------

docker build --rm -t local/c7-systemd-httpd .

docker images

#만든 이미지를 실행한다. 
#systemd 버전은 실행 후 쉘이 컨테이너에 머물러 있음(조사필)
docker run local/c7-systemd-httpd

대화형은 오류
docker run -it local/c7-systemd-httpd

2. 여기 Dockerfile 내용을 가져다고 Dockerfile 생성(대소문자 구분)


~~~~~~~ 여기까지 PASS


########################################
#기본 Centos7 OS 이미지 생성
########################################

#검색하면 centos official이 있는데 이 것은 항상 최신의 이미지임
docker search centos

#centos만 지정하면 최신버전이고, 버전을 명시하면 그 버전으로 다운로드함
#docker pull --name "mycentos7" docker.io/centos:7 #docker-ce 버전은 "--name"옵션을 지원하지 않음

docker pull docker.io/centos:7
docker images

#로컬에 내려 받은 것을 실행하고 RUNNING 되는지 보면
#docker run --name "mycentos7" docker.io/centos
docker run --name "mycentos7" centos:7
docker ps

#실행되지 못하고 off 상태에 있고, exit 코드는 0인 것을 알 수 있음
docker ps -a

#이러한 OS컨테이너는 COMMAND로 데몬이 아닌(없으므로) "/bin/bash" 쉘을 지정했기 때문임
#그래서 방금 만들어서 EXIT 상태에 있는 컨테이너를 지우고
docker rm mycentos7

#처음에 run 할 때 대화형으로 만들어 주며, 대화형이므로 exit로 나온다.
#exit 나올 때 COMMAND가 종료된 것이므로 컨테이너는 종료된다.
#또한 TIMEZONE은 서울로 맞춘다.
#docker run -it -e TZ=Asia/Seoul --name "mycentos7" docker.io/centos:7 

docker run -it -e TZ=Asia/Seoul --name "mycentos7" centos:7 
exit

#실행포인트가 대화(쉘)이므로 exit로 나오면 실행중이던 컨테이너가 종료되며 종료된 흔적 확인은
docker ps -a

#이렇게 처음에 대화형으로 만들게 되면 재실행하면 running 되며
docker start mycentos7
docker ps

#이제 언제든지 쉘 안으로 들어가고 나올 수 할 수 있다.
docker exec -it mycentos7 /bin/bash

#크기 93MB / 293MB
docker ps -s

########################################
# 설치 - yum
########################################

#각종 툴 설치

docker exec -it mycentos7 /bin/bash

#OS공통 툴(크기 94MB / 294MB)
yum install -y net-tools wget which

#OpenSSH 빌드용(크기 387MB / 587MB)
yum install -y perl-CGI 
yum groupinstall -y "Development tools"

#아파치 빌드용(크기 511MB / 711MB)
yum install -y expat-devel
yum install -y gcc*

#파일백업 스크립트
cd /sbin
vi bk
------------------------------------------------------------
#CP.ALL.ENABLE

for i in $*
do
        if [ -f $i ]
        then
                cp -pf "$1" "$1".`date +"%y%m%d.%H%M%S"`
        else
                echo "`basename $0` <filenames>"
        fi
done
------------------------------------------------------------

chmod 755 bk


########################################
# 설치 - OpenSSL
########################################

1. 툴설치(Centos7)
yum groupinstall -y "Development tools"
yum install -y perl-CGI
yum install -y wget

2. 다운로드 
mkdir -p /app/src
cd /app/src
wget https://ftp.openssl.org/source/old/1.0.1/openssl-1.0.1u.tar.gz
tar zxvf openssl-1.0.1u.tar.gz
cd openssl-1.0.1u

3. 컴파일
./config -fPIC --prefix=/usr/local/ssl
make
make test
make install

5. 이전 버전 백업(없으므로 PASS
which openssl
/usr/bin/openssl version
ls -al /usr/bin/openssl
mv /usr/bin/openssl /usr/bin/openssl.0.2K-fips

6. 신규 버전을 심볼릭 링크로 설정
ln -s /usr/local/ssl/bin/openssl /usr/bin/openssl

7. 신규 버전 확인
which openssl
/usr/bin/openssl version

openssl version

exit

########################################
# Local Registry에 등록
########################################

#이 컨테이너를 이미지로 저장한다.
#https://www.techrepublic.com/article/how-to-commit-changes-to-a-docker-image/
#이미지 이름은 Local Resistry에 업로드 할 수 있는 naming(repository:tag)으로 한다
#hosts 파일에 localreg 등록
docker commit CONTAINER_ID reg.hmp.com:443/mycentos7beta:1

#이미지가 저장되었는지 확인되면 업로드 한다
docker images
docker push reg.hmp.com:443/mycentos7beta:1

#업로드확인
curl https://reg.hmp.com/v2/_catalog


#로컬이미지 삭제하고 Private Resistry에서 다시 가져와 본다
docker rmi reg.hmp.com:443/mycentos7beta:1
docker pull reg.hmp.com:443/mycentos7beta:1


########################################
# 아파치웹서버(커스터마이징)
########################################

#













